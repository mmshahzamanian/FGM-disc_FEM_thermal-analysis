% Finite element profram to perform a thermal analysis for functionally graded materials (FGMs)
% Written by: Mehdi Shahzamanian, Mechanical Engineering Department 
% Texas A&M University, USA, mmshahzamanian@gmail.com
%-----------------------------------------------------------------------
clear; 
clc;
%input data for control parameters
nel=80;
nnel=3; 
ndof=1; 
nnode=nel+2; 
sdof=nnode*ndof;
m3=-1.3575;
m2=-0.23;
m1=0.3538;
alphazero=7.11*(10^(-6));
moduluszero=117000;
ri=0.2;
ro=1;
thickness=0.1;
no=0.3;
%input data for nodal coordinate values
for i=1:2:nel+1
    gcoord(i,1)=ri+(i-1)*((ro-ri)/nel);
    gcoord(i,2)=0;
end
for i=2:2:nel+2
    gcoord(i,1)=ri+(i-2)*((ro-ri)/nel);
    gcoord(i,2)=thickness;
end
%input data for nodal connectivity for each element         
for jel=1:2:(nel-1);
    nodes(jel,1)=jel;
    nodes(jel,2)=jel+3;
    nodes(jel,3)=jel+1;        
end 
for jel=2:2:nel;
    nodes(jel,1)=jel-1;
    nodes(jel,2)=jel+1;
    nodes(jel,3)=jel+2;          
end 
%input data for boundary conditions
bcdof(1)=1;
bcval(1)=0;
bcdof(2)=2; 
bcval(2)=0; 
bcdof(3)=nel+1;
bcval(3)=100;
bcdof(4)=nel+2; 
bcval(4)=100;
%initialization of matrices and vectors
ff=zeros(sdof,1);   
kk=zeros(sdof,sdof);
index=zeros(nnel*ndof,1); 
pi=4*atan(1);
thermalstrain=zeros(82,1);
%UPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUPUP
%computation of matrices and vectors and their assembly for First Half of the Elements 
for iel=1:2:nel-1
    nd(1)=nodes(iel,1);
    nd(2)=nodes(iel,2);
    nd(3)=nodes(iel,3);     
    r1=gcoord(nd(1),1);
    r2=gcoord(nd(2),1);
    r3=gcoord(nd(3),1);
    z1=gcoord(nd(1),2);
    z2=gcoord(nd(2),2);
    z3=gcoord(nd(3),2);       
% index=feeldof 
    edof=nnel*ndof;
    k=0;
    for i=1:nnel
        start=(nd(i)-1)*ndof;
        for j=1:ndof
        k=k+1;
        index(k)=start+j;  
        end
    end
%k=felpaxt3   
    a=0.5*(r2*z3+r1*z2+r3*z1-r2*z1-r1*z3-r3*z2);
    syms r;
    syms z;
A=r2*z3-r3*z2;
B=z2-z3;
C=r3-r2;
D=r3*z1-r1*z3;
E=z3-z1;
F=r1-r3;
G=r1*z2-r2*z1;
H=z1-z2;
I=r2-r1;
k=2*pi*(1/(4*(a.^2)))*int(int(r*([B;E;H]*[B,E,H]+[C;F;I]*[C,F,I]),r,r1,(r1+((r2-r1)/(z2-z1))*(z-z1))),z,z1,z3);
u=((m3)/(4*(a.^2)));
T=2*pi*int(int(u*[A+B*r+C*z;D+E*r+F*z;G+H*r+I*z]*[B,E,H],r,r1,(r1+((r2-r1)/(z2-z1))*(z-z1))),z,z1,z3);    
k=k-T;
%kk=feasmbl1    
    edof=length(index);  
    for i=1:edof
        ii=index(i);
        for j=1:edof
            jj=index(j);
            kk(ii,jj)=kk(ii,jj)+k(i,j);
        end
    end
end
%DOWNDOWNDOWNDOWNDOWNDOWNDOWNDOWNDOWNDOWNDOWNDOWNDOWNDOWNDOWNDOWNDOWNDOWNDO
%computation of matrices and vectors and their assembly for Second Half of the Elements 
for iel=2:2:nel
    nd(1)=nodes(iel,1);
    nd(2)=nodes(iel,2);
    nd(3)=nodes(iel,3);     
    r1=gcoord(nd(1),1);
    r2=gcoord(nd(2),1);
    r3=gcoord(nd(3),1);
    z1=gcoord(nd(1),2);
    z2=gcoord(nd(2),2);
    z3=gcoord(nd(3),2);       
% index=feeldof 
    edof=nnel*ndof;
    k=0;
    for i=1:nnel
        start=(nd(i)-1)*ndof;
        for j=1:ndof
        k=k+1;
        index(k)=start+j;  
        end
    end
%k=felpaxt3   
    a=0.5*(r2*z3+r1*z2+r3*z1-r2*z1-r1*z3-r3*z2);
    syms r;
    syms z;
A=r2*z3-r3*z2;
B=z2-z3;
C=r3-r2;
D=r3*z1-r1*z3;
E=z3-z1;
F=r1-r3;
G=r1*z2-r2*z1;
H=z1-z2;
I=r2-r1;      
k=2*pi*(1/(4*(a.^2)))*int(int(r*([B;E;H]*[B,E,H]+[C;F;I]*[C,F,I]),r,(r1+((r3-r1)/(z3-z1))*(z-z1)),r2),z,z1,z3);
u=((m3)/(4*(a.^2)));
T=2*pi*int(int(u*[A+B*r+C*z;D+E*r+F*z;G+H*r+I*z]*[B,E,H],r,(r1+((r3-r1)/(z3-z1))*(z-z1)),r2),z,z1,z3);    
k=k-T;
%kk=feasmbl1    
    edof=length(index); 
    for i=1:edof
        ii=index(i);
        for j=1:edof
            jj=index(j);
            kk(ii,jj)=kk(ii,jj)+k(i,j);
        end
    end
end
%pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp
%feaplyc2
n=length(bcdof); 
sdof=size(kk);
for i=1:n
    cc=bcdof(i);
    for j=1:sdof
        kk(cc,j)=0;
    end
    
    kk(cc,cc)=1;
    ff(cc)=bcval(i);
end
fsol=kk\ff;
for t=1:2:(nel+1);
thermalstress(t)=((1+no)*(alphazero*((gcoord(t,1))^m2)*fsol(t)))*(1/(1-no^2))*moduluszero*((gcoord(t,1))^m1);
thermalstrain(t)=alphazero*((gcoord(t,1))^m2)*fsol(t);
end

% plot(gcoord(t,1),fsol(t));
% xlabel('Non-dimensional Radius (r/ro)')
% ylabel('Temperature,C')


% plot(gcoord(t,1),thermalstress);
% xlabel('Radius')
% ylabel('Thermal stress,MPa')
hold on
t=1:2:(nel+1);
plot(gcoord(t,1),fsol(t));
xlabel('Non-dimensional Radius')
ylabel('Thermal Strain)')




